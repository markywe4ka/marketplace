import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import api from '../services/api';
import '../styles/ProfilePage.css';

const ProfilePage = () => {
  const { user, updateUser, logout } = useAuth();
  const navigate = useNavigate();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
  const [activeTab, setActiveTab] = useState('profile');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const [editMode, setEditMode] = useState(false);
  const [userForm, setUserForm] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    birthday: ''
  });
  const [errors, setErrors] = useState({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  const [orders, setOrders] = useState([]);
  const [loadingOrders, setLoadingOrders] = useState(false);
  const [ordersError, setOrdersError] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const [wishlist, setWishlist] = useState([]);
  const [loadingWishlist, setLoadingWishlist] = useState(false);
  const [wishlistError, setWishlistError] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
  const [addresses, setAddresses] = useState([]);
  const [loadingAddresses, setLoadingAddresses] = useState(false);
  const [addressesError, setAddressesError] = useState(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user) {
      setUserForm({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        phone: user.phone || '',
        birthday: user.birthday || ''
      });
    }
  }, [user]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  useEffect(() => {
    if (activeTab === 'orders') {
      const fetchOrders = async () => {
        try {
          setLoadingOrders(true);
          
          // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ API
          try {
            const ordersData = await api.orders.getUserOrders();
            setOrders(ordersData);
          } catch (apiError) {
            console.error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', apiError);
            setOrdersError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤');
          }
          
          setLoadingOrders(false);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤:', error);
          setOrdersError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤');
          setLoadingOrders(false);
        }
      };
      
      fetchOrders();
    }
  }, [activeTab]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  useEffect(() => {
    if (activeTab === 'wishlist') {
      const fetchWishlist = async () => {
        try {
          setLoadingWishlist(true);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ API
          try {
            const wishlistData = await api.wishlist.getWishlist();
            setWishlist(wishlistData);
          } catch (apiError) {
            console.error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', apiError);
            setWishlistError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã');
          }
          
          setLoadingWishlist(false);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
          setWishlistError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤');
          setLoadingWishlist(false);
        }
      };
      
      fetchWishlist();
    }
  }, [activeTab]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
  useEffect(() => {
    if (activeTab === 'addresses') {
      const fetchAddresses = async () => {
        try {
          setLoadingAddresses(true);
          
          // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ API
          try {
            const addressesData = await api.user.getAddresses();
            setAddresses(addressesData);
          } catch (apiError) {
            console.error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤:', apiError);
            setAddressesError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏');
          }
          
          setLoadingAddresses(false);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤:', error);
          setAddressesError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏');
          setLoadingAddresses(false);
        }
      };
      
      fetchAddresses();
    }
  }, [activeTab]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleChange = (e) => {
    const { name, value } = e.target;
    setUserForm(prev => ({ ...prev, [name]: value }));
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors = {};
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    if (!userForm.firstName.trim()) {
      newErrors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–º–∏–ª–∏–∏
    if (!userForm.lastName.trim()) {
      newErrors.lastName = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if (!userForm.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/\S+@\S+\.\S+/.test(userForm.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω)
    if (userForm.phone && !/^[+]?[0-9]{10,15}$/.test(userForm.phone)) {
      newErrors.phone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSaveProfile = async () => {
    if (!validateForm()) {
      return;
    }
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await updateUser(userForm);
      
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setEditMode(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      setErrors({ general: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const handleRemoveFromWishlist = async (productId) => {
    try {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ API
      await api.wishlist.removeFromWishlist(productId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      setWishlist(prev => prev.filter(item => item._id !== productId));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    }
  };
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  const renderOrdersTab = () => {
    if (loadingOrders) {
      return (
        <div className="tab-loading">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
        </div>
      );
    }
    
    if (ordersError) {
      return (
        <div className="tab-error">
          <p>{ordersError}</p>
          <button onClick={() => setActiveTab('orders')}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      );
    }
    
    if (orders.length === 0) {
      return (
        <div className="empty-tab">
          <div className="empty-icon">üì¶</div>
          <h3>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</h3>
          <p>–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å</p>
          <Link to="/" className="action-btn">–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º</Link>
        </div>
      );
    }
    
    return (
      <div className="orders-list">
        {orders.map(order => (
          <div key={order._id} className="order-card">
            <div className="order-header">
              <div className="order-number">–ó–∞–∫–∞–∑ ‚Ññ{order.orderNumber}</div>
              <div className="order-date">{new Date(order.createdAt).toLocaleDateString('ru-RU')}</div>
              <div className={`order-status ${order.status}`}>{getOrderStatusText(order.status)}</div>
            </div>
            
            <div className="order-items">
              {order.items.slice(0, 3).map(item => (
                <div key={item.productId} className="order-item">
                  <div className="item-image">
                    <img src={item.image || '/placeholder.jpg'} alt={item.name} />
                  </div>
                  <div className="item-details">
                    <div className="item-name">{item.name}</div>
                    <div className="item-meta">
                      {item.color && <span className="item-color">–¶–≤–µ—Ç: {item.color}</span>}
                      {item.size && <span className="item-size">–†–∞–∑–º–µ—Ä: {item.size}</span>}
                      <span className="item-quantity">–ö–æ–ª-–≤–æ: {item.quantity}</span>
                    </div>
                  </div>
                  <div className="item-price">{formatPrice(item.price * item.quantity)}</div>
                </div>
              ))}
              
              {order.items.length > 3 && (
                <div className="more-items">
                  + –µ—â–µ {order.items.length - 3} —Ç–æ–≤–∞—Ä–∞
                </div>
              )}
            </div>
            
            <div className="order-footer">
              <div className="order-total">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span className="total-price">{formatPrice(order.totalAmount)}</span>
              </div>
              
              <Link to={`/order/${order._id}`} className="view-order-btn">
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
              </Link>
            </div>
          </div>
        ))}
      </div>
    );
  };
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const renderWishlistTab = () => {
    if (loadingWishlist) {
      return (
        <div className="tab-loading">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...</p>
        </div>
      );
    }
    
    if (wishlistError) {
      return (
        <div className="tab-error">
          <p>{wishlistError}</p>
          <button onClick={() => setActiveTab('wishlist')}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      );
    }
    
    if (wishlist.length === 0) {
      return (
        <div className="empty-tab">
          <div className="empty-icon">‚ô°</div>
          <h3>–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç</h3>
          <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ</p>
          <Link to="/" className="action-btn">–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º</Link>
        </div>
      );
    }
    
    return (
      <div className="wishlist-grid">
        {wishlist.map(product => (
          <div key={product._id} className="wishlist-item">
            <button 
              className="remove-wishlist" 
              onClick={() => handleRemoveFromWishlist(product._id)}
            >
              ‚úñ
            </button>
            
            <Link to={`/product/${product._id}`} className="wishlist-link">
              <div className="wishlist-image">
                <img src={product.images[0] || '/placeholder.jpg'} alt={product.name} />
              </div>
              
              <div className="wishlist-info">
                <h3 className="wishlist-name">{product.name}</h3>
                <div className="wishlist-price">
                  {product.originalPrice && (
                    <span className="original-price">{formatPrice(product.originalPrice)}</span>
                  )}
                  <span className="current-price">{formatPrice(product.price)}</span>
                </div>
              </div>
            </Link>
            
            <button 
              className="add-to-cart-btn"
              onClick={() => handleAddToCart(product._id)}
            >
              –í –∫–æ—Ä–∑–∏–Ω—É
            </button>
          </div>
        ))}
      </div>
    );
  };
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
  const renderAddressesTab = () => {
    if (loadingAddresses) {
      return (
        <div className="tab-loading">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤...</p>
        </div>
      );
    }
    
    if (addressesError) {
      return (
        <div className="tab-error">
          <p>{addressesError}</p>
          <button onClick={() => setActiveTab('addresses')}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      );
    }
    
    if (addresses.length === 0) {
      return (
        <div className="empty-tab">
          <div className="empty-icon">üìç</div>
          <h3>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤</h3>
          <p>–î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤</p>
          <button className="action-btn" onClick={() => navigate('/profile/add-address')}>
            –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å
          </button>
        </div>
      );
    }
    
    return (
      <div className="addresses-list">
        {addresses.map(address => (
          <div key={address._id} className="address-card">
            {address.isDefault && <div className="default-badge">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</div>}
            
            <div className="address-name">{address.name}</div>
            
            <div className="address-details">
              <div className="address-line">{address.street}</div>
              <div className="address-line">
                {address.city}, {address.region}, {address.postalCode}
              </div>
              <div className="address-line">{address.country}</div>
              {address.phone && <div className="address-phone">{address.phone}</div>}
            </div>
            
            <div className="address-actions">
              <button 
                className="edit-address-btn"
                onClick={() => navigate(`/profile/edit-address/${address._id}`)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              
              {!address.isDefault && (
                <button 
                  className="set-default-btn"
                  onClick={() => handleSetDefaultAddress(address._id)}
                >
                  –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º
                </button>
              )}
              
              <button 
                className="delete-address-btn"
                onClick={() => handleDeleteAddress(address._id)}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        ))}
        
        <button 
          className="add-address-btn"
          onClick={() => navigate('/profile/add-address')}
        >
          + –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
        </button>
      </div>
    );
  };
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
  const formatPrice = (price) => {
    return `${price.toLocaleString('ru-RU')} ‚ÇΩ`;
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  const getOrderStatusText = (status) => {
    switch (status) {
      case 'pending':
        return '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏';
      case 'processing':
        return '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è';
      case 'shipped':
        return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'delivered':
        return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled':
        return '–û—Ç–º–µ–Ω–µ–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const handleSetDefaultAddress = async (addressId) => {
    try {
      await api.user.setDefaultAddress(addressId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
      setAddresses(prev => 
        prev.map(address => ({
          ...address,
          isDefault: address._id === addressId
        }))
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
  const handleDeleteAddress = async (addressId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?')) {
      try {
        await api.user.deleteAddress(addressId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
        setAddresses(prev => prev.filter(address => address._id !== addressId));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞');
      }
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const handleAddToCart = async (productId) => {
    try {
      await api.cart.addToCart(productId, 1);
      alert('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
    }
  };
  
  // –í—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
  const handleLogout = () => {
    logout();
    navigate('/');
  };
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ ProtectedRoute)
  if (!user) {
    return (
      <div className="profile-page">
        <div className="container">
          <div className="error-message">
            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.</p>
            <Link to="/login" className="action-btn">–í–æ–π—Ç–∏</Link>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="profile-page">
      <div className="container">
        <div className="profile-header">
          <h1>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>
          <button className="logout-btn" onClick={handleLogout}>
            –í—ã–π—Ç–∏
          </button>
        </div>
        
        <div className="profile-container">
          {/* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é */}
          <div className="profile-sidebar">
            <div className="user-info">
              <div className="user-avatar">
                {user.firstName && user.lastName 
                  ? `${user.firstName[0]}${user.lastName[0]}`
                  : user.email[0].toUpperCase()}
              </div>
              <div className="user-name">
                {user.firstName && user.lastName 
                  ? `${user.firstName} ${user.lastName}`
                  : user.email}
              </div>
            </div>
            
            <div className="profile-menu">
              <button 
                className={`menu-item ${activeTab === 'profile' ? 'active' : ''}`}
                onClick={() => setActiveTab('profile')}
              >
                <span className="menu-icon">üë§</span>
                <span className="menu-text">–ü—Ä–æ—Ñ–∏–ª—å</span>
              </button>
              
              <button 
                className={`menu-item ${activeTab === 'orders' ? 'active' : ''}`}
                onClick={() => setActiveTab('orders')}
              >
                <span className="menu-icon">üì¶</span>
                <span className="menu-text">–ó–∞–∫–∞–∑—ã</span>
              </button>
              
              <button 
                className={`menu-item ${activeTab === 'wishlist' ? 'active' : ''}`}
                onClick={() => setActiveTab('wishlist')}
              >
                <span className="menu-icon">‚ô°</span>
                <span className="menu-text">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
              </button>
              
              <button 
                className={`menu-item ${activeTab === 'addresses' ? 'active' : ''}`}
                onClick={() => setActiveTab('addresses')}
              >
                <span className="menu-icon">üìç</span>
                <span className="menu-text">–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</span>
              </button>
              
              <button 
                className={`menu-item ${activeTab === 'password' ? 'active' : ''}`}
                onClick={() => setActiveTab('password')}
              >
                <span className="menu-icon">üîí</span>
                <span className="menu-text">–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</span>
              </button>
            </div>
          </div>
          
          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
          <div className="profile-content">
            {/* –ü—Ä–æ—Ñ–∏–ª—å */}
            {activeTab === 'profile' && (
              <div className="tab-content profile-tab">
                <div className="tab-header">
                  <h2>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</h2>
                  {!editMode && (
                    <button 
                      className="edit-profile-btn"
                      onClick={() => setEditMode(true)}
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  )}
                </div>
                
                {errors.general && (
                  <div className="profile-error">
                    {errors.general}
                  </div>
                )}
                
                {editMode ? (
                  // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  <form className="profile-form">
                    <div className="form-row">
                      <div className="form-group">
                        <label htmlFor="firstName">–ò–º—è</label>
                        <input
                          type="text"
                          id="firstName"
                          name="firstName"
                          value={userForm.firstName}
                          onChange={handleChange}
                          className={errors.firstName ? 'error' : ''}
                        />
                        {errors.firstName && <div className="error-message">{errors.firstName}</div>}
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</label>
                        <input
                          type="text"
                          id="lastName"
                          name="lastName"
                          value={userForm.lastName}
                          onChange={handleChange}
                          className={errors.lastName ? 'error' : ''}
                        />
                        {errors.lastName && <div className="error-message">{errors.lastName}</div>}
                      </div>
                    </div>
                    
                    <div className="form-group">
                      <label htmlFor="email">Email</label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        value={userForm.email}
                        onChange={handleChange}
                        className={errors.email ? 'error' : ''}
                        disabled // Email –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
                      />
                      {errors.email && <div className="error-message">{errors.email}</div>}
                    </div>
                    
                    <div className="form-group">
                      <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                      <input
                        type="tel"
                        id="phone"
                        name="phone"
                        value={userForm.phone}
                        onChange={handleChange}
                        className={errors.phone ? 'error' : ''}
                        placeholder="+7XXXXXXXXXX"
                      />
                      {errors.phone && <div className="error-message">{errors.phone}</div>}
                    </div>
                    
                    <div className="form-group">
                      <label htmlFor="birthday">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</label>
                      <input
                        type="date"
                        id="birthday"
                        name="birthday"
                        value={userForm.birthday}
                        onChange={handleChange}
                      />
                    </div>
                    
                    <div className="form-actions">
                      <button 
                        type="button"
                        className="cancel-btn"
                        onClick={() => {
                          setEditMode(false);
                          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                          setUserForm({
                            firstName: user.firstName || '',
                            lastName: user.lastName || '',
                            email: user.email || '',
                            phone: user.phone || '',
                            birthday: user.birthday || ''
                          });
                        }}
                      >
                        –û—Ç–º–µ–Ω–∞
                      </button>
                      
                      <button 
                        type="button"
                        className="save-btn"
                        onClick={handleSaveProfile}
                      >
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                      </button>
                    </div>
                  </form>
                ) : (
                  // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                  <div className="profile-data">
                    <div className="data-row">
                      <div className="data-label">–ò–º—è:</div>
                      <div className="data-value">{user.firstName || '‚Äî'}</div>
                    </div>
                    
                    <div className="data-row">
                      <div className="data-label">–§–∞–º–∏–ª–∏—è:</div>
                      <div className="data-value">{user.lastName || '‚Äî'}</div>
                    </div>
                    
                    <div className="data-row">
                      <div className="data-label">Email:</div>
                      <div className="data-value">{user.email}</div>
                    </div>
                    
                    <div className="data-row">
                      <div className="data-label">–¢–µ–ª–µ—Ñ–æ–Ω:</div>
                      <div className="data-value">{user.phone || '‚Äî'}</div>
                    </div>
                    
                    <div className="data-row">
                      <div className="data-label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</div>
                      <div className="data-value">
                        {user.birthday 
                          ? new Date(user.birthday).toLocaleDateString('ru-RU')
                          : '‚Äî'
                        }
                      </div>
                    </div>
                    
                    <div className="data-row">
                      <div className="data-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</div>
                      <div className="data-value">
                        {user.createdAt 
                          ? new Date(user.createdAt).toLocaleDateString('ru-RU')
                          : '‚Äî'
                        }
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
            
            {/* –ó–∞–∫–∞–∑—ã */}
            {activeTab === 'orders' && (
              <div className="tab-content orders-tab">
                <div className="tab-header">
                  <h2>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>
                </div>
                
                {renderOrdersTab()}
              </div>
            )}
            
            {/* –ò–∑–±—Ä–∞–Ω–Ω–æ–µ */}
            {activeTab === 'wishlist' && (
              <div className="tab-content wishlist-tab">
                <div className="tab-header">
                  <h2>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</h2>
                </div>
                
                {renderWishlistTab()}
              </div>
            )}
            
            {/* –ê–¥—Ä–µ—Å–∞ */}
            {activeTab === 'addresses' && (
              <div className="tab-content addresses-tab">
                <div className="tab-header">
                  <h2>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</h2>
                </div>
                
                {renderAddressesTab()}
              </div>
            )}
            
            {/* –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è */}
            {activeTab === 'password' && (
              <div className="tab-content password-tab">
                <div className="tab-header">
                  <h2>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h2>
                </div>
                
                {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è */}
                <div className="coming-soon">
                  <p>–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;